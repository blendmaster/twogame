// Generated by LiveScript 1.2.0
var ne, combinations, nePattern, p;
ne = function(p1, p2, m, n){
  var p1br, i$, row, j$, col, k$, otherCol, p2br, otherRow, ref$, len$, br1, results$ = [];
  p1br = {};
  for (i$ = 0; i$ < m; ++i$) {
    row = i$;
    nextCol: for (j$ = 0; j$ < n; ++j$) {
      col = j$;
      for (k$ = 0; k$ < n; ++k$) {
        otherCol = k$;
        if (col !== otherCol) {
          if (p1[row * m + otherCol] > p1[row * m + col]) {
            continue nextCol;
          }
        }
      }
      p1br[row * m + col] = true;
    }
  }
  p2br = {};
  for (i$ = 0; i$ < n; ++i$) {
    col = i$;
    nextRow: for (j$ = 0; j$ < m; ++j$) {
      row = j$;
      for (k$ = 0; k$ < m; ++k$) {
        otherRow = k$;
        if (row !== otherRow) {
          if (p2[otherRow * m + col] > p2[row * m + col]) {
            continue nextRow;
          }
        }
      }
      p2br[row * m + col] = true;
    }
  }
  for (i$ = 0, len$ = (ref$ = Object.keys(p1br)).length; i$ < len$; ++i$) {
    br1 = ref$[i$];
    if (p2br[br1]) {
      results$.push(br1);
    }
  }
  return results$;
};
combinations = function(n){
  var combs, i$, ref$, len$, comb, j$, i, c;
  if (n === 0) {
    return [];
  } else if (n === 1) {
    return [[1]];
  } else {
    combs = [];
    for (i$ = 0, len$ = (ref$ = combinations(n - 1)).length; i$ < len$; ++i$) {
      comb = ref$[i$];
      for (j$ = 0; j$ < n; ++j$) {
        i = j$;
        c = comb.slice();
        c.splice(i, 0, n);
        combs.push(c);
      }
    }
    return combs;
  }
};
nePattern = function(){
  var patt, i$, len$, p1, lresult$, j$, len1$, p2, results$ = [];
  patt = combinations(6);
  for (i$ = 0, len$ = patt.length; i$ < len$; ++i$) {
    p1 = patt[i$];
    lresult$ = [];
    for (j$ = 0, len1$ = patt.length; j$ < len1$; ++j$) {
      p2 = patt[j$];
      lresult$.push(ne(p1, p2, 2, 3).length);
    }
    results$.push(lresult$);
  }
  return results$;
};
p = nePattern();
console.log("P2\n" + p.length + " " + p[0].length + " 2\n" + p.map(function(it){
  return it.join(' ');
}).join('\n'));