// Generated by LiveScript 1.2.0
var classes2, classes1, games, i$, i, p1, j$, j, p2, canvas, ref$, w, h, gw, gh, ctx, tot, particles, res$, update;
classes2 = [[3, 4, 1, 2], [2, 4, 1, 3], [1, 4, 2, 3], [1, 4, 3, 2], [2, 4, 3, 1], [3, 4, 2, 1], [4, 3, 2, 1], [4, 2, 3, 1], [4, 1, 3, 2], [4, 1, 2, 3], [4, 2, 1, 3], [4, 3, 1, 2]];
classes1 = [[2, 3, 1, 4], [3, 2, 1, 4], [3, 1, 2, 4], [2, 1, 3, 4], [1, 2, 3, 4], [1, 3, 2, 4], [1, 4, 2, 3], [1, 4, 3, 2], [2, 4, 3, 1], [3, 4, 2, 1], [3, 4, 1, 2], [2, 4, 1, 3]];
games = [];
for (i$ = 0; i$ < 12; ++i$) {
  i = i$;
  p1 = classes1[i];
  for (j$ = 0; j$ < 12; ++j$) {
    j = j$;
    p2 = classes2[j];
    (games[i] || (games[i] = []))[j] = [p1[0], p2[0], p1[1], p2[1], p1[2], p2[2], p1[3], p2[3]];
  }
}
ref$ = canvas = document.getElementById('canvas'), w = ref$.width, h = ref$.height;
gw = w / 12;
gh = h / 12;
ctx = canvas.getContext('2d');
tot = 600;
res$ = [];
for (i$ = 0; i$ < tot; ++i$) {
  i = i$;
  res$.push({
    x: Math.random() * w,
    y: Math.random() * h,
    life: Math.random() * 20 | 0,
    color: Math.random() > 0.5 ? 'white' : 'black'
  });
}
particles = res$;
update = function(){
  var newP, i$, ref$, len$, p, x, y, gi, gx, gj, gy, game, ref1$, dx, dy;
  newP = [];
  for (i$ = 0, len$ = (ref$ = particles).length; i$ < len$; ++i$) {
    p = ref$[i$], x = p.x, y = p.y;
    gi = (12 - x / gw | 0) % 12;
    gx = (x % gw) / gw;
    gj = (12 - y / gh | 0) % 12;
    gy = (y % gh) / gh;
    game = games[gi][gj];
    ref1$ = dyn(gx, gy, game), dx = ref1$[0], dy = ref1$[1];
    dx *= 2.8;
    dy *= 2.8;
    ctx.strokeStyle = p.color;
    ctx.beginPath();
    ctx.moveTo(x, y);
    p.x += dx;
    p.y += dy;
    ctx.lineTo(p.x, p.y);
    ctx.stroke();
    if (--p.life > 0) {
      newP.push(p);
    }
  }
  particles = newP;
  while (particles.length < tot) {
    particles.push({
      x: Math.random() * w,
      y: Math.random() * h,
      life: Math.random() * 20 | 0,
      color: Math.random() > 0.5 ? 'white' : 'black'
    });
  }
  requestAnimationFrame(update);
};
update();
function dyn(a, b, u){
  var expected1c, expected1d, expected2c, expected2d, avgPayoff1, avgPayoff2, d1d, d1c, d2d, d2c;
  expected1c = (1 - a) * u[0] + a * u[2];
  expected1d = (1 - a) * u[4] + a * u[6];
  expected2c = (1 - b) * u[1] + b * u[5];
  expected2d = (1 - b) * u[3] + b * u[7];
  avgPayoff1 = b * expected1d + (1 - b) * expected1c;
  avgPayoff2 = a * expected2d + (1 - a) * expected2c;
  d1d = (1 - b) * Math.max(0, expected1d - avgPayoff1);
  d1c = b * Math.max(0, expected1c - avgPayoff1);
  d2d = (1 - a) * Math.max(0, expected2d - avgPayoff2);
  d2c = a * Math.max(0, expected2c - avgPayoff2);
  return [d2d - d2c, d1d - d1c];
}