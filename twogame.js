// Generated by LiveScript 1.2.0
var nashEquilibria, identity, classes2, classes1, names, pairs, games, orders, i$, len$, i, nameClass, p1, j$, len1$, j, name, p2, u, tran, intProp, s, sx, sy, dragNormal, dragDyn, df, TYPE, DisplayType, TYPES, w, h, $, bindType, initType, displays, slice$ = [].slice;
nashEquilibria = function(p1, p2, m, n){
  var ne;
  ne = [];
  if (u[0] > u[4] && u[1] > u[3]) {
    ne.push(0);
  }
  if (u[2] > u[6] && u[3] > u[1]) {
    ne.push(1);
  }
  if (u[4] > u[0] && u[5] > u[7]) {
    ne.push(2);
  }
  if (u[6] > u[2] && u[7] > u[5]) {
    ne.push(3);
  }
  return ne;
};
identity = function(it){
  return it;
};
classes2 = [[3, 4, 1, 2], [2, 4, 1, 3], [1, 4, 2, 3], [1, 4, 3, 2], [2, 4, 3, 1], [3, 4, 2, 1], [4, 3, 2, 1], [4, 2, 3, 1], [4, 1, 3, 2], [4, 1, 2, 3], [4, 2, 1, 3], [4, 3, 1, 2]];
classes1 = [[2, 3, 1, 4], [3, 2, 1, 4], [3, 1, 2, 4], [2, 1, 3, 4], [1, 2, 3, 4], [1, 3, 2, 4], [1, 4, 2, 3], [1, 4, 3, 2], [2, 4, 3, 1], [3, 4, 2, 1], [3, 4, 1, 2], [2, 4, 1, 3]];
names = [['Hegemony', 'Samaritan-D', 'Chicken-Peace', 'Biased-Cycle', 'Inferior-Cycle', 'Endless-Cycle', 'Called-Bluff', 'Bully', 'Chicken-Comp', 'Chicken-Hero', 'Chicken-Battle', 'Chicken'], ['Samson', 'Battle-Harmony', 'Generous', 'Quasi-Cycle', 'Tragic-Cycle', 'Inspector-Cycle', 'Patron', 'Battle-Lock', 'Protector', 'Battle-Hero', 'Battle', 'Passive-Samaritan'], ['Delilah', 'Hero-Harmony', 'Hero-Peace', 'Pursuit-Cycle', 'Fixed-Cycle', 'Crisis-Cycle', 'Hero-Dilemma', 'Hero-Lock', 'Hero-Compromise', 'Hero', 'Hero-Battle', 'Hero-Chicken'], ['Hostage', 'Compromise-Hmny', 'Dominant', 'Compromise-Coord', 'Second-Best', 'Big-Bully', 'Misery', 'Compromise-Lock', 'Compromise', 'Compromise-Hero', 'Protector', 'Compro-Chicken'], ['Blackmailer', 'Lock-Harmony', 'Lock-Peace', 'Lock-Coordination', 'Lock-Assurance', 'Hamlet', 'Total-Conflict', 'Deadlock', 'Lock-Compromise', 'Lock-Hero', 'Lock-Battle', 'Bully'], ['Hegemonic-Stability', 'Dilemma-Hmny', 'Altruist', 'Revelation', 'Alibi', 'Asym-Dilemma', 'Dilemma', 'Total-Conflict', 'Misery', 'Dilemma-Hero', 'Patron', 'Called-Bluff'], ['Anticipation', 'Hunt-Harmony', 'Hunt-Peace', 'Hunt-Coordination', 'Hunt-Assurance', 'Stag-Hunt', 'Asym-Dilemma', 'Hamlet', 'Big-Bully', 'Crisis-Cycle', 'Inspector-Cycle', 'Endless-Cycle'], ['Mutual', 'Assurance-Harmony', 'Privilege', 'Assur-Coord', 'Asurrance', 'Assurance-Hunt', 'Alibi', 'Asurrance-Lock', 'Second-Best', 'Fixed-Cycle', 'Tragic-Cycle', 'Inferior-Cycle'], ['Coord-Concord', 'Coord-Harmony', 'Coord-Peace', 'Coordination', 'Coord-Assur', 'Coord-Hunt', 'Revelation', 'Coord-Lock', 'Coord-Compromise', 'Pursuit-Cycle', 'Quasi-Cycle', 'Biased-Cycle'], ['Aligned', 'Peace-Harmony', 'Peace', 'Peace-Coordination', 'Privilege', 'Peace-Hunt', 'Altruist', 'Peace-Lock', 'Dominant', 'Peace-Hero', 'Generous', 'Peace-Chicken'], ['Harmony-Concord', 'Harmony', 'Harmony-Peace', 'Harmony-Coord', 'Harmony-Assur', 'Harmony-Hunt', 'Hmny-Dilemma', 'Harmony-Lock', 'Harmony-Compromise', 'Harmony-Hero', 'Harmony-Battle', 'Samaritan-D'], ['Concord', 'Concord-Harmony', 'Aligned', 'Concord-Coord', 'Mutual', 'Anticipation', 'Hegemonic-Stability', 'Blackmailer', 'Hostage', 'Delilah', 'Samson', 'Hegemony']];
pairs = [];
games = [];
orders = {};
for (i$ = 0, len$ = names.length; i$ < len$; ++i$) {
  i = i$;
  nameClass = names[i$];
  p1 = classes1[i];
  for (j$ = 0, len1$ = nameClass.length; j$ < len1$; ++j$) {
    j = j$;
    name = nameClass[j$];
    p2 = classes2[j];
    (games[i] || (games[i] = []))[j] = [p1[0], p2[0], p1[1], p2[1], p1[2], p2[2], p1[3], p2[3]];
    (orders[p1] || (orders[p1] = {}))[p2] = pairs.length;
    pairs.push([i, j]);
  }
}
u = games[11][0].slice();
tran = function(sel, duration){
  if (duration > 0) {
    return sel.transition().duration(duration);
  } else {
    return sel;
  }
};
intProp = function(it){
  var el;
  el = document.getElementById(it);
  return Bacon.fromEventTarget(el, 'input', function(){
    return el.value;
  }).skipDuplicates().toProperty(el.value).map(partialize$.apply(this, [parseInt, [void 8, 10], [0]]));
};
s = d3.scale.linear().domain([1, 4]).range([5, 30]);
sx = d3.scale.linear().domain([1, 4]).range([0, 200]);
sy = d3.scale.linear().domain([1, 4]).range([200, 0]);
dragNormal = d3.behavior.drag().on('dragstart', function(){
  document.body.classList.add('dragging');
}).on('dragend', function(){
  document.body.classList.remove('dragging');
}).on('drag', function(arg$, i){
  u[i] -= d3.event.dy / 40;
  u[i] = Math.min(4, Math.max(1, u[i]));
  d3.selectAll('.dwabs').each(function(){
    this.__type__.bind.call(d3.select(this.firstElementChild));
  });
});
dragDyn = d3.behavior.drag().origin(function(){
  return this.__pos__;
}).on('dragstart', function(){
  document.body.classList.add('moving');
}).on('dragend', function(){
  document.body.classList.remove('moving');
}).on('drag', function(it){
  u[it + 1] = sx.invert(d3.event.x);
  u[it + 1] = Math.min(4, Math.max(1, u[it + 1]));
  u[it] = sy.invert(d3.event.y);
  u[it] = Math.min(4, Math.max(1, u[it]));
  d3.selectAll('.dwabs').each(function(){
    this.__type__.bind.call(d3.select(this.firstElementChild));
  });
});
df = d3.format('1.2g');
TYPE = {};
DisplayType = (function(){
  DisplayType.displayName = 'DisplayType';
  var prototype = DisplayType.prototype, constructor = DisplayType;
  function DisplayType(id, name, bind, transitions){
    this.id = id;
    this.name = name;
    this.bind = bind;
    this.transitions = transitions;
    TYPE[this.id] = this;
  }
  return DisplayType;
}());
TYPES = function(it){
  return it.map(function(it){
    return new DisplayType(it[0], it[1], it[2], it[3]);
  });
}([
  [
    'table', 'Normal (Numbers)', function(){
      var ne;
      this.selectAll('.utility').data(u).text(df);
      ne = nashEquilibria([u[0], u[2], u[4], u[6]], [u[1], u[3], u[5], u[7]], 2, 2);
      this.selectAll('td').classed('ne', function(arg$, i){
        return in$(i, ne);
      });
    }, {}
  ], [
    'normal', 'Normal Form', function(duration){
      var x$, ne;
      x$ = this.selectAll('.utility').data(u);
      tran(x$, duration).attr('r', s);
      ne = nashEquilibria([u[0], u[2], u[4], u[6]], [u[1], u[3], u[5], u[7]], 2, 2);
      this.selectAll('.rcell').classed('ne', function(arg$, i){
        return in$(i, ne);
      });
    }, {
      dynamics: function(duration){},
      categories: function(duration){},
      normal: function(duration){
        this.selectAll('.utility').call(dragNormal);
      }
    }
  ], [
    'dynamics', 'Dynamics Chart', function(duration){
      var p1p, p2p, pp, x$, y$, z$;
      p1p = [
        u[0] < u[4]
          ? [u[1], u[5], u[0], u[4]]
          : [u[5], u[1], u[4], u[0]], u[2] < u[6]
          ? [u[3], u[7], u[2], u[6]]
          : [u[7], u[3], u[6], u[2]]
      ];
      p2p = [
        u[1] < u[3]
          ? [u[1], u[3], u[0], u[2]]
          : [u[3], u[1], u[2], u[0]], u[5] < u[7]
          ? [u[5], u[7], u[4], u[6]]
          : [u[7], u[5], u[6], u[4]]
      ];
      pp = 0;
      x$ = this.selectAll('.dynamic.p1').data(p1p);
      tran(x$, duration).attr('x1', function(){
        return sx(function(it){
          return it[0];
        }.apply(this, arguments));
      }).attr('x2', function(){
        return sx(function(it){
          return it[1];
        }.apply(this, arguments));
      }).attr('y1', function(){
        return (function(it){
          return it + pp;
        })(sy(function(it){
          return it[2];
        }.apply(this, arguments)));
      }).attr('y2', function(){
        return (function(it){
          return it + pp;
        })(sy(function(it){
          return it[3];
        }.apply(this, arguments)));
      });
      y$ = this.selectAll('.dynamic.p2').data(p2p);
      tran(y$, duration).attr('x1', function(){
        return (function(it){
          return it - pp;
        })(sx(function(it){
          return it[0];
        }.apply(this, arguments)));
      }).attr('x2', function(){
        return (function(it){
          return it - pp;
        })(sx(function(it){
          return it[1];
        }.apply(this, arguments)));
      }).attr('y1', function(){
        return sy(function(it){
          return it[2];
        }.apply(this, arguments));
      }).attr('y2', function(){
        return sy(function(it){
          return it[3];
        }.apply(this, arguments));
      });
      z$ = this.selectAll('.outcome').data([0, 2, 4, 6]);
      z$.each(function(it){
        this.__pos__ = {
          x: sx(u[it + 1]),
          y: sy(u[it])
        };
      });
      tran(z$, duration).attr('transform', function(it){
        return "translate(" + sx(u[it + 1]) + ", " + sy(u[it]) + ")";
      });
    }, {
      dynamics: function(duration){
        this.selectAll('.outcome').data([0, 2, 4, 6]).call(dragDyn);
      },
      categories: function(duration){}
    }
  ], [
    'categories', 'Text Categories', function(duration){
      var p1, p2, currentGame, ref$;
      p1 = [0, 2, 4, 6].map(function(it, i){
        return [i, u[it]];
      }).sort(usort).map(function(arg$, i){
        var oi;
        oi = arg$[0];
        return [i, oi];
      }).sort(usort).map(function(it){
        return it[0] + 1;
      });
      p2 = [1, 3, 5, 7].map(function(it, i){
        return [i, u[it]];
      }).sort(usort).map(function(arg$, i){
        var oi;
        oi = arg$[0];
        return [i, oi];
      }).sort(usort).map(function(it){
        return it[0] + 1;
      });
      currentGame = (ref$ = orders[p1]) != null ? ref$[p2] : void 8;
      this.select('.name').node().value = currentGame;
      this.select('.zero-sum').text(u[0] + u[1] === (ref$ = u[2] + u[3]) && ref$ === (ref$ = u[4] + u[5]) && ref$ === u[6] + u[7] ? 'Yes' : 'No');
    }, {
      dynamics: function(duration){},
      categories: function(duration){
        var x$, p1, p2, currentGame, ref$;
        x$ = this.select('.name');
        x$.selectAll('option').data(pairs).enter().append('option').attr('value', function(arg$, i){
          return i;
        }).text(function(arg$){
          var i, j;
          i = arg$[0], j = arg$[1];
          return names[i][j];
        });
        p1 = [0, 2, 4, 6].map(function(it, i){
          return [i, u[it]];
        }).sort(usort).map(function(arg$, i){
          var oi;
          oi = arg$[0];
          return [i, oi];
        }).sort(usort).map(function(it){
          return it[0] + 1;
        });
        p2 = [1, 3, 5, 7].map(function(it, i){
          return [i, u[it]];
        }).sort(usort).map(function(arg$, i){
          var oi;
          oi = arg$[0];
          return [i, oi];
        }).sort(usort).map(function(it){
          return it[0] + 1;
        });
        currentGame = (ref$ = orders[p1]) != null ? ref$[p2] : void 8;
        x$.node().value = currentGame;
        x$.on('change', function(){
          var ref$, i, j;
          ref$ = pairs[this.value], i = ref$[0], j = ref$[1];
          u = games[i][j].slice();
          d3.selectAll('.dwabs').each(function(){
            this.__type__.bind.call(d3.select(this.firstElementChild), 1000);
          });
        });
      }
    }
  ], [
    'order', 'Order Table', function(duration){
      var coords, p1s, p2s, li, x$, y$;
      coords = [[65, 125], [125, 75], [165, 125], [225, 75], [65, 225], [125, 175], [165, 225], [225, 175]];
      p1s = [0, 2, 4, 6].map(function(it, i){
        return [it, u[it]];
      }).sort(usort);
      p2s = [1, 3, 5, 7].map(function(it, i){
        return [it, u[it]];
      }).sort(usort);
      li = d3.svg.line();
      x$ = this.select('.order-path.p1');
      tran(x$, 1000).attr('d', li(p1s.map(function(it){
        return coords[it[0]];
      })));
      y$ = this.select('.order-path.p2');
      tran(y$, 1000).attr('d', li(p2s.map(function(it){
        return coords[it[0]];
      })));
    }, {
      order: function(duration){}
    }
  ], [
    'field', 'Vector Field', function(duration){}, {
      field: function(duration){
        var n, tot, particles, res$, i$, i, ctx, tick, update;
        n = this.select('canvas').node();
        tot = 200;
        res$ = [];
        for (i$ = 0; i$ < tot; ++i$) {
          i = i$;
          res$.push({
            x: Math.random(),
            y: Math.random(),
            life: 10 + Math.random() * 50 | 0
          });
        }
        particles = res$;
        ctx = n.getContext('2d');
        tick = function(){
          if (n.parentNode != null) {
            requestAnimationFrame(update);
          }
        };
        update = function(){
          var x$, newP, i$, ref$, len$, p, ref1$, dx, dy;
          x$ = ctx;
          x$.fillStyle = 'rgba(255, 255, 255, 0.1)';
          x$.fillRect(0, 0, w, h);
          newP = [];
          for (i$ = 0, len$ = (ref$ = particles).length; i$ < len$; ++i$) {
            p = ref$[i$];
            ref1$ = dyn(p.x, p.y), dx = ref1$[0], dy = ref1$[1];
            dx *= 0.03;
            dy *= 0.03;
            ctx.beginPath();
            ctx.moveTo(p.x * w, p.y * h);
            p.x += dx;
            p.y += dy;
            ctx.lineTo(p.x * w, p.y * h);
            ctx.stroke();
            if ((0 < (ref1$ = p.x) && ref1$ < 1) && (0 < (ref1$ = p.y) && ref1$ < 1) && --p.life > 0) {
              newP.push(p);
            }
          }
          particles = newP;
          while (particles.length < tot) {
            particles.push({
              x: Math.random(),
              y: Math.random(),
              life: 10
            });
          }
          setTimeout(tick, 50);
        };
        update();
      }
    }
  ]
]);
w = h = 200;
function dyn(a, b){
  var expected1c, expected1d, expected2c, expected2d, avgPayoff1, avgPayoff2, d1d, d1c, d2d, d2c;
  expected1c = (1 - a) * u[0] + a * u[2];
  expected1d = (1 - a) * u[4] + a * u[6];
  expected2c = (1 - b) * u[1] + b * u[5];
  expected2d = (1 - b) * u[3] + b * u[7];
  avgPayoff1 = b * expected1d + (1 - b) * expected1c;
  avgPayoff2 = a * expected2d + (1 - a) * expected2c;
  d1d = (1 - b) * Math.max(0, expected1d - avgPayoff1);
  d1c = b * Math.max(0, expected1c - avgPayoff1);
  d2d = (1 - a) * Math.max(0, expected2d - avgPayoff2);
  d2c = a * Math.max(0, expected2c - avgPayoff2);
  return [d2d - d2c, d1d - d1c];
}
function usort(arg$, arg1$){
  var ai, a, bi, b;
  ai = arg$[0], a = arg$[1];
  bi = arg1$[0], b = arg1$[1];
  if (a === b) {
    return 0;
  } else if (a > b) {
    return 1;
  } else {
    return -1;
  }
}
$ = bind$(document, 'getElementById');
bindType = function(type, display){
  var x$;
  x$ = $("d" + display);
  x$.__type__ = TYPE[type];
  while (x$.firstChild != null) {
    x$.removeChild(x$.firstChild);
  }
  x$.appendChild($("t-" + type).content.cloneNode(true));
  TYPE[type].bind.call(d3.select(x$.firstElementChild));
};
initType = function(type, display){
  var d, dd, t, i$, ref$, len$, ref1$;
  d = $("d" + display);
  dd = d3.select(d);
  t = d.__type__;
  for (i$ = 0, len$ = (ref$ = TYPES).length; i$ < len$; ++i$) {
    type = ref$[i$];
    if ((ref1$ = t.transitions[type.id]) != null) {
      ref1$.call(dd, 1000);
    }
  }
};
displays = d3.select('#displays');
intProp('num-displays').onValue(function(it){
  var x$, y$, z$, z1$, z2$;
  x$ = displays.selectAll('.display').data(d3.range(it));
  x$.exit().remove();
  y$ = x$.enter().append('div').attr('class', 'display');
  z$ = y$.append('div').append('select');
  z$.selectAll('option').data(TYPES).enter().append('option').attr('value', function(it){
    return it.id;
  }).text(function(it){
    return it.name;
  }).attr('selected', function(arg$, i, j){
    if (i === j) {
      return 'selected';
    }
  });
  z$.on('change', function(arg$, i){
    bindType(this.value, i);
    initType(this.value, i);
  });
  z1$ = y$.append('div');
  z1$.attr('class', 'dwrap');
  z2$ = z1$.append('div');
  z2$.attr('class', 'dwabs');
  z2$.attr('id', function(it){
    return "d" + it;
  });
  z2$.each(function(arg$, i){
    bindType(TYPES[i % TYPES.length].id, i);
    initType(this.value, i);
  });
});
function partialize$(f, args, where){
  var context = this;
  return function(){
    var params = slice$.call(arguments), i,
        len = params.length, wlen = where.length,
        ta = args ? args.concat() : [], tw = where ? where.concat() : [];
    for(i = 0; i < len; ++i) { ta[tw[0]] = params[i]; tw.shift(); }
    return len < wlen && len ?
      partialize$.apply(context, [f, ta, tw]) : f.apply(context, ta);
  };
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}